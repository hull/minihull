#!/usr/bin/env node

const Minihull = require("../src/minihull");
const Minibase = require("../src/minibase");
const ReplServer = require("../src/repl-server");

const minihull = new Minihull({
  publicAddr: process.argv[2]
});
const replServer = ReplServer("minihull > ");
const port = 3000;

function mixinContext() {
  Object.assign(replServer.context, minihull);
  const functions = Object.getOwnPropertyNames(Object.getPrototypeOf(minihull))
    .concat(Object.getOwnPropertyNames(minihull).filter(f => typeof minihull[f] === "function"))
    .concat(["save", "load", "list"]); // TODO: find more flexible way of mixin' the base class methods
  functions.map(funcName => {
    if (funcName === "_") {
      return replServer.context[funcName] = minihull[funcName];
    }
    replServer.context[funcName] = minihull[funcName].bind(minihull);
  });
}

minihull.listen(port)
  .then(() => {
    console.log(`minihull listening on ${port} as ${minihull.getOrgAddr()}`);
    replServer.displayPrompt();
  });

mixinContext();
replServer.on('reset', mixinContext);
replServer.on('exit', () => {
  minihull.close();
});

